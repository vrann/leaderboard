var pullRequestMetadata = {
        getCreateObject: function(data, updateData, config) {
            // pr = {
            //     id: data.id,
            //     user_id: data.user.id,
            //     number: data.number,
            //     labels: [],
            //     title: data.title,
            //     body: data.body,
            //     created_at: data.created_at,
            //     updated_at: data.updated_at,
            //     closed_at: data.closed_at,
            //     merged_at: data.marged_at,
            //     merge_commit_sha: data.merge_commit_sha,
            //     assignee: data.assignee ? data.assignee.id : null,
            //     assignees: [],
            //     merged_at: data.merged_at,
            //     mergeable: data.mergeable,
            //     rebaseable: data.rebaseable,
            //     mergeable_state: data.mergeable_state,
            //     merged_by: data.merged_by,
            //     comments: data.comments,
            //     review_comments: data.review_comments,
            //     maintainer_can_modify: data.maintainer_can_modify,
            //     commits: data.commits,
            //     additions: data.additions,
            //     deletions: data.deletions,
            //     changed_files: data.changed_files,
            //     baseOrganisation: data.base.user.login,
            //     baseRepo: data.base.repo.name
            // }
            
            updateObject  = this.getUpdateObject(data, updateData, config)
            
            // Object.keys(updateData).map(function(key, index) {
            //     data[key] = updateData[key];
            // });
            Object.keys(updateObject).map(function(key, index) {
                data[key] = updateObject[key];
            });
            return data
        },

        getUpdateObject: function(document, updateData, config) {
            updateObject = {}
            Object.keys(updateData).map(function(key, index) {
                switch (key) {
                    case 'labels':
                        
                        labels = document.hasOwnProperty('labels') ? document.labels : [];
                        newLabels = []
                        labels.map(element => {
                            if (element != null) {
                                newLabels.push(element)
                            }
                        })
                        updateData.labels.map(function(label) {
                            console.log(newLabels, label)
                            if (!newLabels.find(function(element) {return element.id == label.id})) {
                                newLabels.push(label);
                                updateObject.labels = newLabels;
                            }
                        })
                        break;
                    default:
                        updateObject[key] = updateData[key];
                        break;    
                }
            })
            //case 'unlabeled':
            return updateObject;
        }
}

module.exports = pullRequestMetadata;