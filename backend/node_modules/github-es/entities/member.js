var member = {
        getCreateObject: function(data, updateData, config) {
            console.log('Start', data.login);
            if (!data.hasOwnProperty('prs')) {
                data.prs = []
            }
            if (!data.hasOwnProperty('teams')) {
                data.teams = []
            }
            updateObject  = this.getUpdateObject(data, updateData, config)
            // if (data.login == 'larsroettig') {
            //     console.log(data)
            //     console.log(updateData)
            //     console.log(updateObject)
            // }
            // Object.keys(updateData).map(function(key, index) {
            //     data[key] = updateData[key];
            // });
            Object.keys(updateObject).map(function(key, index) {
                data[key] = updateObject[key];
            });

            // if (data.login == 'larsroettig') {
            //     console.log('data', updateObject)
            // }
            console.log('End', data.login);
            return data
        },

        getUpdateObject: function(document, updateData, config) {
            updateObject = document;//{}
            //console.log(updateData);

            Object.keys(updateData).map(function(key, index) {
                //data[key] = updateData[key];
                switch (key) {
                    case 'prs':
                        prs = document.hasOwnProperty('prs') ? document.prs : [];
                        updateData.prs.map(function(pr) {
                            if (!prs.find(function(element) {return element == pr})) {
                                prs.push(pr);
                            }
                        })
                        updateObject.prs = prs;
                        break;
                    case 'teams':
                        teams = document.hasOwnProperty('teams') ? document.teams : [];
                        updateData.teams.map(function(team) {
                            if (!teams.find(function(element) {return element.id == team.id})) {
                                teams.push(team);
                            }
                        })
                        updateObject.teams = teams;
                        break;
                    default:
                        updateObject[key] = updateData[key];
                        break;        
                }
            });

            // if (updateData.hasOwnProperty('prs')) {
            //     prs = document.hasOwnProperty('prs') ? document.prs : [];
            //     updateData.prs.map(function(pr) {
            //         if (!prs.find(function(element) {return element == pr})) {
            //             prs.push(pr);
            //             updateObject.prs = prs;
            //         }
            //     })
            // }

            // if (updateData.hasOwnProperty('teams')) {
            //     teams = document.hasOwnProperty('teams') ? document.teams : [];
            //     updateData.teams.map(function(team) {
            //         if (!teams.find(function(element) {return element.id == team.id})) {
            //             teams.push(team);
            //             updateObject.teams = teams;
            //         }
            //     })
            // }
            return updateObject;
        }
}

module.exports = member;